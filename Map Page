<apex:page controller="mapController">

<apex:sectionHeader title="Kasey Uhlenhuth's" subtitle="Pipeline Map" />

  <head>
      <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script>
      <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script> 
      <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.leaflet, '/Leaflet/dist/leaflet.css')}"/>
      <script type="text/javascript" src="{!URLFOR($Resource.leaflet, '/Leaflet/dist/leaflet-src.js')}"></script>
      <script type="text/javascript" src="{!URLFOR($Resource.leaflet, '/Leaflet/dist/leaflet.js')}"></script>
      <script type="text/javascript"> </script>
      
      <style>
      #map {
        height:800px;
        text-align: left;
      }
      .legend {
              line-height: 20px;
              color: #555;
              padding: 15px;
              background: white;
              background: rgba(255,255,255,0.8);
              box-shadow: 0 0 15px rgba(0,0,0,0.2);
              border-radius: 5px;
              text-align: left;
          }
          .legend i {
              width: 18px;
              height: 18px;
              float: left;
              margin-right: 8px;
              opacity: 0.7;
          }
      </style>
  </head> 
  
  <body>
  
       <apex:pageBlock id="companyA" title="Pipeline for A companies" >
              //where map will appear
              <div id="map"></div> 
              
              <script>
                   //array of cities that should be in map
                   var cityArray=[];
                   //dictionary with city name and companies ("accounts") in that city
                   var mapObject = {};
              </script>
       </apex:pageBlock>
     
      <apex:pageBlock id="javascriptstuff" rendered="{!AND(NOT(ISNULL(mapAccount)))}">
       <apex:repeat value="{!mapAccount}" var="mapKey" id="results">  
          <apex:repeat value="{!mapAccount[mapKey]}" var="m">
          <script>
              var k = "{!m.City__c}" + ", " + "{!m.State_Province__c}";
              var key = k.toUpperCase().replace(".", "").replace("'","");
              var temp =[];
              temp.push("{!m.Name}");
              temp.push("{!names[m.OwnerId]}");
              if("{!m.Status_Volition_Capital__c}" == ''){
                  temp.push("{!m.Status__c}");
              }else{
                  temp.push("{!m.Status_Volition_Capital__c}");
              }
              temp.push("{!m.Lat__Latitude__s}");
              temp.push("{!m.Lat__Longitude__s}");
              temp.push("{!m.Id}");
              if (key in mapObject) {
                  mapObject[key].push(temp);
              } else {
                  mapObject[key] = [];
                  mapObject[key].push(temp);
              }
             </script> 
  
         </apex:repeat>
         </apex:repeat>
       
       </apex:pageBlock>
        <apex:pageBlock title="Companies with incomplete info">
         <apex:pageBlockTable value="{!errors}" var="e">
              <apex:column value="{!e.name}"/> 
              <apex:column value="{!e.City__c}"/> 
              <apex:column value="{!e.State_Province__c}"/> 
              <apex:column value="{!e.Status_Volition_Capital__c}"/> 
              
  
          </apex:pageBlockTable> 
      </apex:pageBlock>
      <script>
      
                  //A company map
                  var map = L.map('map').setView([39.8282,-98.5795], 4);    
                  L.tileLayer('http://tile.osm.org/{z}/{x}/{y}.png').addTo(map);
  
                  
                  //add legend to map
                  var legend = L.control({position: 'topright'});
                      legend.onAdd = function (map) {
                          var div = L.DomUtil.create('div', 'legend'),
                              grades = ["1-5 companies", "5-10 companies", "10-20 companies", "20+ companies"],
                              labels = ["#dd1e2f", "#ebb035","#06a2cb", "#32CD32"];
                          div.innerHTML = "<b> KEY </b> <br>";
                          // loop through our density intervals and generate a label with a colored square for each interval
                          for (var i = 0; i < grades.length; i++) {
                              div.innerHTML +=
                                  '<i style="background:' + labels[i] + '"></i> ' +
                                  grades[i] + '<br>';
                          }
                          return div;
                      };
                  legend.addTo(map);
          
       
          
          //function to bind popup
          function onEachFeature(feature, layer) {
               if (feature.properties && feature.properties.companies) {
                      var string="";
                      for(var i=0; i<feature.properties.companies.length; i++){
                          var s = "<b>" + feature.properties.companies[i][0] +  "</b>" + ": " + feature.properties.companies[i][2] + ", " + feature.properties.companies[i][1] + "<br>";
                          string= string + s;
                      }                   
                      layer.bindPopup("<i>" + feature.properties.address + "</i>  (" + feature.properties.companies.length + ")  <br>" + string);
              }
          }
             
          //set longitude and latitude of newly added cities and save to SF db (remote action)            
           function testing(lat,long,acc) {
              mapController.setLatLong(lat,long,acc, function(result, event) {
              	if(event.status){
                  	console.log("Update successful");}
              }, {escape:true});
              
          }
          
          //style the markers based on radius size
          function style(feature){
              var r = feature.properties.radius;
              
                  if(r<5){
                      return {color:"#dd1e2f", fillOpacity: .8, radius:r*2};
                  }else if (r<10){
                      return {color:"#ebb035",  fillOpacity: .6, radius:r*1.75};
                  }else if (r<20){
                      return {color:"#06a2cb",  fillOpacity: .4, radius:r*1.5};
                  }else{
                      if(r<25){
                          return {color:"#32CD32",  fillOpacity: .2, radius:r*1.25};
                      }else{
                          return {color:"#32CD32",  fillOpacity: .2, radius:r*.9};
                      }
                      
              }
          
          }        
        
   
          var cities = Object.keys(mapObject);
          var geocoder = new google.maps.Geocoder();
          var size = cities.length;
          var cityObject = {};
          
          
          function go(index){
              if(index >= size) { return; }
              var address = cities[index];
              if(mapObject[address][0][3]==""){
                  geocoder.geocode( { 'address': address}, function(results, status) {
                          if (status == google.maps.GeocoderStatus.OK && results.length) {
                              if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                                var temp =[];
                                var lat = results[0].geometry.location.lat();
                                var lng = results[0].geometry.location.lng();
                                testing(lat,lng, mapObject[address][0][5]);
                                console.log("Geocoded: \n" + address + "\n" + mapObject[address][0][0] +  "\n" + mapObject[address][0][5]+ "\n" + lat + "," + lng);
                                var marker = {
                                      "type": "Feature",
                                      "properties": {
                                          "address": address,
                                          "companies": mapObject[address],
                                          "radius": mapObject[address].length
                                      },
                                      "geometry": {
                                          "type": "Point",
                                          "coordinates": [lng, lat]
                                      }
                                  };
                                 L.geoJson(marker, {onEachFeature:onEachFeature, pointToLayer: function (feature, latlng) {return L.circleMarker(latlng, style(feature))}}).addTo(map);
                                    
                                go(index+1);
                            } 
                            }else {
                               console.log("geocode failed for " + address);
                            }
                          
                   });
              }else{
                   var lat = mapObject[address][0][3]; 
                   var lng = mapObject[address][0][4];
                   //console.log(lat);
                   //console.log(lng);
                   var marker = {
                                      "type": "Feature",
                                      "properties": {
                                          "address": address,
                                          "companies": mapObject[address],
                                          "radius": mapObject[address].length
                                      },
                                      "geometry": {
                                          "type": "Point",
                                          "coordinates": [lng, lat]
                                      }
                                  };
                                 L.geoJson(marker, {onEachFeature:onEachFeature, pointToLayer: function (feature, latlng) {return L.circleMarker(latlng, style(feature))}}).addTo(map);
                                  go(index+1);
              }
          }
          
          //plot map
          go(0);
          //console.log(mapObject);

      </script>
  </body> 

</apex:page>

